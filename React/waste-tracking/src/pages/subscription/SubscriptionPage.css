/*
  SubscriptionPage.css
  Styles for the subscription form, designed to be compatible with index.css.
*/
.main-container {
  justify-content: flex-start; /* Align form elements to the top */
  overflow-y: auto;          /* Allow scrolling on smaller screens */
  gap: 0.25rem;                /* Add small, consistent spacing between elements */
  max-width: 750px; /* Smaller width for the container */
  width: 90%; /* Ensure it's responsive */
}

/* Styles for the groups of subscription options (type and period) */
.subscription-options-group {
  width: 100%;
  margin-bottom: 1.5rem; /* Space between different option groups */
  display: flex;
  flex-direction: column;
  align-items: center;
}

.subscription-options-group h3 {
  font-size: 1.2em;
  color: var(--header-color);
  margin-bottom: 0.75rem;
  text-align: center;
  width: 100%;
}

.subscription-description {
  font-size: 0.9em;
  color: var(--menu-text);
  text-align: center;
  margin-top: 0.5rem;
  margin-bottom: 1rem;
  padding: 0 1rem;
}

/* ----- Form Element Styling ----- */

/* Styles for section headings (e.g., "User Details") */
.main-container h2 {
  font-size: 1.6em; /* Slightly larger category titles */
  color: var(--header-color); /* Use header color for titles */
  margin-bottom: 1.5rem;
  padding-bottom: 0.75rem;
  border-bottom: 2px solid var(--button-color); /* Accent color for heading underline */
  text-align: left;
}

/* Remove top margin from the first heading to reduce excessive space */
.main-container h2:first-of-type {
  margin-top: 0.5rem;
}

/*
  Styles for the "Auto-Renew" checkbox container.
  This targets the <label> using its inline style attribute from the TSX file.
*/
.main-container label[style*="display: flex"] {
  display: flex;
  align-items: center;
  gap: 0.75rem;
  width: 100%;
  margin-top: 1rem;
  color: var(--menu-text);
  cursor: pointer;
  font-size: 1rem;
  /* Override generic button/link styles from index.css that might affect labels */
  font-weight: normal;
  text-align: left;
  padding: 0;
  background: none;
  border: none;
  height: auto;
  justify-content: center;
}

/* Styles the checkbox input itself */
.main-container label[style*="display: flex"] input[type="checkbox"] {
  /* Reset width/height from generic input styles */
  width: 1.25em;
  height: 1.25em;
  margin: 0;
  cursor: pointer;
  /* Uses the theme's button color for the checkmark */
  accent-color: var(--button-color);
}

/*
  Styles for validation error messages.
  This targets the <p> tags using their inline style attribute from the TSX file.
*/
.main-container p[style*="color: red"] {
  color: var(--error-color);
  font-size: 0.875rem;
  margin-top: 4px;
  margin-bottom: 4px;
  width: 100%; /* Ensure error messages span full width */
  text-align: left;
}

/*
  Styles for the final status message (e.g., "Submitting...").
  This targets the <p> tag using its inline style attribute from the TSX file.
*/
.main-container p[style*="text-align: center"] {
  text-align: center;
  margin-top: 1rem;
  color: var(--menu-text);
  opacity: 0.8;
  width: 100%;
}

/* Add a bit more space above the final submit button for better separation */
.main-container button[type="submit"] {
  margin-top: 1.5rem; /* More space above the submit button */
  width: auto; /* Allow width to be based on content */
  max-width: 200px; /* Prevent stretching */
  margin-left: auto; /* Center the button */
  margin-right: auto; /* Center the button */
  display: flex; /* Center text inside the button */
  justify-content: center;
  align-items: center;
}

/* --- View Toggle Buttons Container --- */
.view-toggle-buttons {
  display: flex;
  justify-content: center;
  margin-bottom: 1.5rem;
  border-radius: 8px;
  overflow: hidden;
  box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
  width: 100%; /* Ensure it takes full width of its parent */
}

/* --- Individual Toggle Buttons --- */
.toggle-button {
  flex: 1; /* Distribute space equally */
  padding: 0.75rem 1rem;
  font-size: 1rem;
  font-weight: 500;
  border: 1px solid var(--border-color); /* A consistent border for all buttons */
  background-color: var(--menu-bg); /* Default background */
  color: var(--menu-text); /* Default text color */
  cursor: pointer;
  transition: background-color 0.2s ease, color 0.2s ease, border-color 0.2s ease;
  white-space: nowrap;
  border-radius: 0;
}

/* Remove left border for subsequent buttons to create a connected look */
.toggle-button + .toggle-button {
  border-left: none;
}

/* Style for the active (selected) button */
.toggle-button.active {
  background-color: var(--button-color); /* The green color you want */
  color: white; /* Text color for the active button */
  font-weight: 600;
  border-color: var(--button-color); /* Make the border color match the background */
  z-index: 1;
  position: relative;
}

/* Ensure the first and last buttons have rounded corners, but only on the outside */
.toggle-button:first-child {
  border-top-left-radius: 8px;
  border-bottom-left-radius: 8px;
}

.toggle-button:last-child {
  border-top-right-radius: 8px;
  border-bottom-right-radius: 8px;
}

/* Adjust for hover state */
.toggle-button:hover {
  background-color: var(--button-hover-color); /* Use the hover color from global vars */
  color: white; /* Keep text color consistent on hover for non-active */
}

/* Ensure active button hover doesn't change its color */
.toggle-button.active:hover {
  background-color: var(--button-color); /* Stays green */
  color: white; /* Stays white */
  cursor: default; /* Optional: indicates it's already selected */
}